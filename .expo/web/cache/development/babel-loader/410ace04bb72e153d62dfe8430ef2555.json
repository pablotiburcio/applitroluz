{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/media/lucas/Arquivos/Programas/applitroluz/src/contexts/guide.tsx\";\n\nimport React, { createContext, useContext, useState } from 'react';\nimport { procedures } from \"../procedures.json\";\nvar GuideContext = createContext({});\n\nvar GuideProvider = function GuideProvider(_ref) {\n  var children = _ref.children;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuide = _useState2[0],\n      setCurrentGuide = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentStep = _useState4[0],\n      setCurrentStep = _useState4[1];\n\n  var _useState5 = useState({}),\n      _useState6 = _slicedToArray(_useState5, 2),\n      currentAction = _useState6[0],\n      setCurrentAction = _useState6[1];\n\n  function setGuide(guideId) {\n    setCurrentGuide(procedures[guideId]);\n  }\n\n  function setStep(stepId) {\n    setCurrentStep(currentGuide.steps[stepId]);\n  }\n\n  function setAction(actionId) {\n    setCurrentAction(currentGuide.actions[actionId]);\n  }\n\n  return React.createElement(GuideContext.Provider, {\n    value: {\n      procedures: procedures,\n      currentGuide: currentGuide,\n      currentStep: currentStep,\n      currentAction: currentAction,\n      setGuide: setGuide,\n      setStep: setStep,\n      setAction: setAction\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nfunction useGuide() {\n  var context = useContext(GuideContext);\n  return context;\n}\n\n;\nexport { GuideProvider, useGuide };","map":{"version":3,"sources":["/media/lucas/Arquivos/Programas/applitroluz/src/contexts/guide.tsx"],"names":["React","createContext","useContext","useState","procedures","GuideContext","GuideProvider","children","currentGuide","setCurrentGuide","currentStep","setCurrentStep","currentAction","setCurrentAction","setGuide","guideId","setStep","stepId","steps","setAction","actionId","actions","useGuide","context"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,QAA3C,QAA2D,OAA3D;AACA,SAASC,UAAT;AAGA,IAAMC,YAAY,GAAGJ,aAAa,CAAmB,EAAnB,CAAlC;;AAEA,IAAMK,aAAuB,GAAG,SAA1BA,aAA0B,OAAkB;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAChD,kBAAwCJ,QAAQ,CAAC,EAAD,CAAhD;AAAA;AAAA,MAAOK,YAAP;AAAA,MAAqBC,eAArB;;AACA,mBAAsCN,QAAQ,CAAC,EAAD,CAA9C;AAAA;AAAA,MAAOO,WAAP;AAAA,MAAoBC,cAApB;;AACA,mBAA0CR,QAAQ,CAAC,EAAD,CAAlD;AAAA;AAAA,MAAOS,aAAP;AAAA,MAAsBC,gBAAtB;;AAEA,WAASC,QAAT,CAAkBC,OAAlB,EAAmC;AACjCN,IAAAA,eAAe,CAACL,UAAU,CAACW,OAAD,CAAX,CAAf;AACD;;AAED,WAASC,OAAT,CAAiBC,MAAjB,EAAiC;AAC/BN,IAAAA,cAAc,CAACH,YAAY,CAACU,KAAb,CAAmBD,MAAnB,CAAD,CAAd;AACD;;AAED,WAASE,SAAT,CAAmBC,QAAnB,EAAqC;AACnCP,IAAAA,gBAAgB,CAACL,YAAY,CAACa,OAAb,CAAqBD,QAArB,CAAD,CAAhB;AACD;;AAED,SACE,oBAAC,YAAD,CAAc,QAAd;AACE,IAAA,KAAK,EAAE;AACLhB,MAAAA,UAAU,EAAVA,UADK;AAELI,MAAAA,YAAY,EAAZA,YAFK;AAGLE,MAAAA,WAAW,EAAXA,WAHK;AAILE,MAAAA,aAAa,EAAbA,aAJK;AAKLE,MAAAA,QAAQ,EAARA,QALK;AAMLE,MAAAA,OAAO,EAAPA,OANK;AAOLG,MAAAA,SAAS,EAATA;AAPK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGZ,QAVH,CADF;AAcD,CA/BD;;AAiCA,SAASe,QAAT,GAAmB;AACjB,MAAMC,OAAO,GAAGrB,UAAU,CAACG,YAAD,CAA1B;AAEA,SAAOkB,OAAP;AACD;;AAAA;AAED,SAASjB,aAAT,EAAwBgB,QAAxB","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport { procedures } from '../procedures.json'\nimport { GuideContextData, Guide, Step, Action } from '../utils/interfaces';\n\nconst GuideContext = createContext<GuideContextData>({} as GuideContextData);\n\nconst GuideProvider: React.FC = ({ children }) => {\n  const [currentGuide, setCurrentGuide] = useState({} as Guide);\n  const [currentStep, setCurrentStep] = useState({} as Step);\n  const [currentAction, setCurrentAction] = useState({} as Action);\n\n  function setGuide(guideId: number) {\n    setCurrentGuide(procedures[guideId]);\n  }\n\n  function setStep(stepId: number) {\n    setCurrentStep(currentGuide.steps[stepId]);\n  }\n\n  function setAction(actionId: number) {\n    setCurrentAction(currentGuide.actions[actionId]);\n  }\n\n  return (\n    <GuideContext.Provider\n      value={{ \n        procedures, \n        currentGuide, \n        currentStep, \n        currentAction, \n        setGuide, \n        setStep, \n        setAction \n      }}>\n      {children}\n    </GuideContext.Provider>\n  );\n};\n\nfunction useGuide(){\n  const context = useContext(GuideContext);\n\n  return context;\n};\n\nexport { GuideProvider, useGuide }\n\n"]},"metadata":{},"sourceType":"module"}